[{"content":"The time has come to add a proper method of saving to YourShot.\nPreviously i had been using the Pause Menu to allow for saving, but I feel like it just doesnt fit the game, and also breaks immersion for a while when you\u0026rsquo;re opening a menu, completely freezing the game, and then pressing save. I looked into a bunch of approaches. This video in particular was especially helpful. I wrote down most approaches that I saw, and heres a list:\n Autosaving Manual Saving Anytime, Anywhere Autosaving + Manual Saving Auto Manual Saving Prompts Quicksaves Save Rooms Save Points  And the one that really caught my eye were save points. Something about the feeling when you have to face off multiple encounters without saving when the next save point is to the end of the level/room is just something that I felt like would make for an enjoyable experience. But like most other manual saving options, this one can be very annoying if not done right. I stumbled upon this thread that had a variety of examples of save points executed well, and uh\u0026hellip; not so well.\nMy key takeaway from this thread was that while big flashing odd-looking out of place saves may make themselves easier to find, most people don\u0026rsquo;t seem to like them very much. I recalled that I had recently implemented a choice system for YourShot already, so why not use that, and enable you to interact with a Save Point that shows information on your current whereabouts and whatnot, and ofcourse allows you to save the game. So, lets get right to it!\nFirst, I needed a Sprite for the save point, so I made this weirdish spr-ite that gets darker each frame, before looping back. It actually turned out alright in game though.Next, I used the choice system that i had recently made for setting up a dialogue for the save point interaction. Heres how it looks in game: Then I just needed to do some backend stuff like hooking the savepoints OnDialogueEnd event to a GameManager.Save() function.\nAnd yeah that was about it! I turned this save point into a Unity Prefab and now I can populate my levels with save points.\nI want to keep a healthy balance of save points for YourShot. I dont want them to be too scarce, but I also want to make it a challenge to reach them. For frequency its gonna be somewhere from an Undertale Savepoint to a Dark Souls Bonfire.\nThat was about it for now, I really want to get to work now on implementing a unique health system as well as some fun combat, and thats probably what im gonna work on next.\nI currently have exams that\u0026rsquo;ll probably last around like 2 weeks, so I wont really get much time to work on the game at all, but I try to jot down any ideas i have, and they\u0026rsquo;re pretty pog not gonna lie. ","permalink":"https://ibrahim.thedev.id/posts/yourshot-save-points/","summary":"The time has come to add a proper method of saving to YourShot.\nPreviously i had been using the Pause Menu to allow for saving, but I feel like it just doesnt fit the game, and also breaks immersion for a while when you\u0026rsquo;re opening a menu, completely freezing the game, and then pressing save. I looked into a bunch of approaches. This video in particular was especially helpful. I wrote down most approaches that I saw, and heres a list:","title":"How I Added Save Points to YourShot"},{"content":"Over the past few days, ive been working on YourShot\u0026rsquo;s Ability system. I tried looking online and there theres not really enough information for a newbie to make an informed decision about how they should approach going about this. In the end I personally settled on a mix of inheritance and scriptable objects. The two objectives for this Ability System for me personally were:\n Making sure that any sort of ability can be created with the system. Making sure that these abilities can be created efficiently and without refactoring.  Before I jump in though, I wanted to say that this is not a step-by-step tutorial. Its more an abstracted version of my approach (even though it will still have a detailed explanation) so you can have a general idea of how to approach making an Ability System.\nCode Structure First of all we shall need an Ability.cs class.\nusing UnityEngine; using System.Collections; namespace YourShot.AbilitySystem { public abstract class Ability : ScriptableObject { public string name = \u0026#34;New Ability\u0026#34;; public Sprite sprite; public AudioClip sound; public float baseCoolDown = 1f; public abstract void Initialize(GameObject obj); public abstract void TriggerAbility(); } } You might or might not understand some stuff right off the bat, so let me explain. First of all, this line:\npublic abstract class Ability : ScriptableObject This class is basically deriving from ScriptableObject. If you dont know what a ScriptableObject is, I\u0026rsquo;d recommend watching this video from Brackeys. If you know a bit about scriptable objects you might be wondering why we aren\u0026rsquo;t using the CreateAssetMenu attribute.\ne.g:\n[CreateAssetMenu(\u0026#34;Abilities/Ability\u0026#34;)] That is because we will be using this attribute in our derived classes for different abilities, since the system wouldnt really work if we used it in our abstract class.\nSpeaking of abstract, an abstract class is basically a restricted class that cannot be used to create objects, and the only way to access is, inheriting it from another class. The rest of the script is pretty self-explanatory, other than\npublic abstract void Foo(); An abstract void is basically a method that does not have a body. The body is \u0026ldquo;filled in\u0026rdquo; by the derived class.\nThis as of now, is just an abstract class. We\u0026rsquo;re gonna create some simple derived classes in a bit.\nNext, we\u0026rsquo;re going to use Unity\u0026rsquo;s Input System to do trigger our abilities whenever we press a button. I\u0026rsquo;m using Unity\u0026rsquo;s New Input System, so this is what my ability triggering script looks like.\npublic class PlayerAbility : MonoBehaviour { [SerializeField] private Ability primaryAbility; [SerializeField] private Ability secondaryAbility; private PlayerControls playerControls; private void Awake() { playerControls = new PlayerControls(); } void Start() { primaryAbility.Initialize(gameObject); secondaryAbility.Initialize(gameObject); playerControls.Main.PrimaryAbility.performed += _ =\u0026gt; primaryAbility.TriggerAbility(); playerControls.Main.SecondaryAbility.performed += _ =\u0026gt; secondaryAbility.TriggerAbility(); } private void OnEnable() { playerControls.Enable(); } private void OnDisable() { playerControls.Disable(); } } However, if you\u0026rsquo;re using Unity\u0026rsquo;s Old Input System just replace these:\nplayerControls.Main.PrimaryAbility.performed += _ =\u0026gt; primaryAbility.TriggerAbility(); with this (but make sure its in Update, not Start):\nif(Input.GetButton(\u0026#34;PrimaryButton\u0026#34;) { primaryAbility.TriggerAbility(); } if(Input.GetButton(\u0026#34;SecondaryButton\u0026#34;) { secondaryAbility.TriggerAbility(); } So this is cool and all, but we cant really assign abstract classes to the inspector. So we need to create some\u0026hellip; D e r i v e d Classes. We still want these classes to be as vague as possible, so as to be able to create more Abilities with less coding, because imagine actually doing effort.\nSo lets make a simple projectile ability.\nusing UnityEngine; using System.Collections; namespace YourShot.AbilitySystem { [CreateAssetMenu(menuName = \u0026#34;Abilities/ProjectileAbility\u0026#34;)] public class ProjectileAbility : Ability { public float projectileForce = 500f; public Rigidbody projectile; private ProjectileShootTriggerable weapon; public override void Initialize(GameObject obj) { weapon = obj.GetComponent\u0026lt;ProjectileShootTriggerable\u0026gt;(); weapon.projectileForce = projectileForce; weapon.projectile = projectile; } public override void TriggerAbility() { weapon.TriggerFire(); } } } So, this is our ProjectileAbility class. If you have keen eye, you might\u0026rsquo;ve noticed that we have this script called ProjectileShootTriggerable. Whats that all about? I\u0026rsquo;ll get to it in a moment. But first, let me explain what is going on in this script.\nFirst and foremost, we have our ProjectileAbility class which derives from Ability with a CreateAssetMenu attribute that we can use to create SerializeObjects in the Projects folder.\nThen we have 2 override methods, which if you didn\u0026rsquo;t notice have the same name as the methods in our original Ability.cs abstracted class. Basically we are overriding (as the keyword suggests) our original abstract methods, basically filling in their body.\nNow, lets go back to that script you saw earlier called ProjectileShootTriggerable that is referenced in our ProjectileAbility.cs script. Here are the contents of that script:\nusing UnityEngine; using System.Collections; public class ProjectileShootTriggerable : MonoBehaviour { [HideInInspector] public Rigidbody projectile; [HideInInspector] public float projectileForce = 250f; public Transform bulletSpawn; public void Launch() { Rigidbody bulletInstance = Instantiate(projectile, bulletSpawn.position, transform.rotation); clonedBullet.AddForce(bulletSpawn.transform.forward * projectileForce); } } You should apply this script to your Gun/Cannon/Firearm/Mass Weapon of Destruction\nThen create a new Ability by Right Clicking on the Project folder, and you should be set. Like i said before, this wasn\u0026rsquo;t really a complete step-by-step tutorial, but if you are intermediate, or know your way around C#, you should now (hopefully) have an idea as to how you should approach making an Ability System. If you are still facing issues though I have my socials on the home page of this blog, and you can contact me from there.\n","permalink":"https://ibrahim.thedev.id/posts/ability-system-unity/","summary":"Over the past few days, ive been working on YourShot\u0026rsquo;s Ability system. I tried looking online and there theres not really enough information for a newbie to make an informed decision about how they should approach going about this. In the end I personally settled on a mix of inheritance and scriptable objects. The two objectives for this Ability System for me personally were:\n Making sure that any sort of ability can be created with the system.","title":"How I Made YourShot's Ability System In Unity"},{"content":"So uh yeah, I have a blog now, I\u0026rsquo;m going to mostly use it for just rambling shit that might be useful to some people, and sometimes just to personally remember something i might find useful and would like to share.\nThis isn\u0026rsquo;t really a conventional kind of blog, its more of a journal-ish thing, but yeah this should be fun :D\n","permalink":"https://ibrahim.thedev.id/posts/hello/","summary":"So uh yeah, I have a blog now, I\u0026rsquo;m going to mostly use it for just rambling shit that might be useful to some people, and sometimes just to personally remember something i might find useful and would like to share.\nThis isn\u0026rsquo;t really a conventional kind of blog, its more of a journal-ish thing, but yeah this should be fun :D","title":"Hello!"},{"content":"","permalink":"https://ibrahim.thedev.id/l2/archives/","summary":"archives","title":"Archive"},{"content":"","permalink":"https://ibrahim.thedev.id/archives/","summary":"archives","title":"Archive"},{"content":"","permalink":"https://ibrahim.thedev.id/search/","summary":"","title":"Search"},{"content":"","permalink":"https://ibrahim.thedev.id/search.l2/","summary":"","title":"SearchL2"}]